---
# vim: set ft=yaml:
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: theodolite-kafka
  namespace: default
spec:
  kafka:
    template:
      pod:
        resources:
          requests:
            memory: "4Gi"
            cpu: 2000m
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
{% if exp_params.kafkaOnWorker %}
                    - key: node-role.kubernetes.io/worker
{% else %}
                    - key: node-role.kubernetes.io/control-plane
{% endif %}
                      operator: In
                      values:
                        - "true"
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      strimzi.io/cluster: theodolite-kafka
                      strimzi.io/kind: Kafka
                      strimzi.io/name: theodolite-kafka-kafka
                  topologyKey: kubernetes.io/hostname

    jvmOptions:
      "-Xmx": "4G"
      "-Xms": "4G"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: theodolite-kafka-metrics
          key: kafka-metrics-config.yml
    config:
      "message.max.bytes": "134217728" # 128 MB
      "replica.fetch.max.bytes": "134217728" #128 MB
      "auto.create.topics.enable": true
      "log.retention.ms": "7200000" # 2h
      "metrics.sample.window.ms": "5000" #5s
      "num.partitions": "300"
      "unclean.leader.election.enable": "true"
      "min.insync.replicas": "1"
      "default.replication.factor": "1"
      "offsets.topic.replication.factor": "1"
      "offsets.topic.num.partitions": "300"
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
    replicas: 3
    storage:
      type: persistent-claim
      size: "100Gi"
  kafkaExporter:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io/control-plane
                      operator: In
                      values:
                        - "true"
    storage:
      type: ephemeral
    entityOperator:
      template:
        pod:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: In
                        values:
                          - "true"
  zookeeper:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io/control-plane
                      operator: In
                      values:
                        - "true"
    storage:
      type: ephemeral
    replicas: 3
    zooEntrance:
      enabled: false
      zookeeperClient:
        nodeSelector:
          node-role.kubernetes.io/control-plane: "true"
  # schemaRegistry:
  #   enabled: true
  #   replicaCount: 1
  #   ## ref: https://hub.docker.com/r/confluentinc/cp-schema-registry/
  #   image: confluentinc/cp-schema-registry
  #   #imageTag: 6.1.0
  #   imageTag: 5.4.0
  #   imagePullPolicy: IfNotPresent
  #   servicePort: 8081
  #   heapOptions: "-Xms512M -Xmx512M"
  #   resources: {}
  #   nodeSelector:
  #     node-role.kubernetes.io/control-plane: "true"
  #   tolerations: []
  #   affinity:
  #     nodeAffinity:
  #       requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #           - matchExpressions:
  #               - key: node-role.kubernetes.io/control-plane
  #                 operator: In
  #                 values:
  #                   - "true"
  #   securityContext:
  #     runAsUser: 10001
  #     runAsGroup: 10001
  #     fsGroup: 10001
  #     runAsNonRoot: true
